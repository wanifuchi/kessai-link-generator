generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  password           String?             // ハッシュ化されたパスワード
  name               String?
  googleId           String?             @unique // Google OAuth ID
  provider           String?             @default("email") // 認証方法 ("email" | "google")
  image              String?             // プロフィール画像URL (NextAuth.js標準)
  emailVerified      DateTime?           // メール認証状態
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  apiSettings        ApiSettings[]       // 旧設定（段階的に削除予定）
  paymentConfigs     UserPaymentConfig[] // 新しい暗号化設定
  paymentLinks       PaymentLink[]
  subscription       Subscription?
  accounts           Account[]           // NextAuth.js用
  sessions           Session[]           // NextAuth.js用
  passwordResetTokens PasswordResetToken[] // パスワードリセットトークン

  @@map("users")
}

// NextAuth.js用のテーブル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique // ハッシュ化されたトークン
  expiresAt DateTime // 有効期限
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model Subscription {
  id                     String               @id @default(cuid())
  userId                 String               @unique
  user                   User                 @relation(fields: [userId], references: [id])
  stripeCustomerId       String               @unique
  stripeSubscriptionId   String               @unique
  status                 SubscriptionStatus
  currentPeriodEnd       DateTime?
  cancelAt               DateTime?
  cancelAtPeriodEnd      Boolean              @default(false)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@map("subscriptions")
}

model PaymentLink {
  id                    String             @id @default(cuid())
  userId                String
  userPaymentConfigId   String
  amount                Int                // 金額（セント単位）
  currency              String             @default("jpy")
  description           String?
  status                PaymentStatus      @default(pending)
  stripePaymentIntentId String?            // Stripe Payment Intent ID
  linkUrl               String             @unique // 決済ページURL
  qrCodeUrl             String?            // QRコード画像URL
  expiresAt             DateTime?          // 有効期限
  completedAt           DateTime?          // 決済完了日時
  metadata              Json?              // 追加メタデータ
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  // リレーション
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPaymentConfig     UserPaymentConfig  @relation(fields: [userPaymentConfigId], references: [id])
  transactions          Transaction[]

  @@index([userId, createdAt])
  @@index([status])
  @@index([expiresAt])
  @@index([stripePaymentIntentId])
  @@index([linkUrl])
  @@map("payment_links")
}

model Transaction {
  id                   String            @id @default(cuid())
  paymentLinkId        String
  amount               Int
  currency             String
  service              PaymentService
  serviceTransactionId String?
  customerEmail        String?
  customerName         String?
  customerPhone        String?
  status               TransactionStatus @default(pending)
  paidAt               DateTime?
  metadata             Json?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  paymentLink          PaymentLink       @relation(fields: [paymentLinkId], references: [id])

  @@index([paymentLinkId])
  @@index([status])
  @@index([createdAt])
  @@index([paidAt])
  @@index([service, status])
  @@map("transactions")
}

// 新しい暗号化対応決済設定モデル
model UserPaymentConfig {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider        PaymentService
  displayName     String        // ユーザー定義の設定名
  encryptedConfig String        @db.Text // 暗号化されたAPI情報（JSON）
  isTestMode      Boolean       @default(true)
  isActive        Boolean       @default(false)
  verifiedAt      DateTime?     // 接続テスト成功日時
  lastTestedAt    DateTime?     // 最後の接続テスト日時
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paymentLinks    PaymentLink[] // この設定を使用した決済リンク

  @@unique([userId, provider, displayName])
  @@index([userId])
  @@index([isActive])
  @@index([provider, isActive])
  @@map("user_payment_configs")
}

// 旧設定モデル（段階的に削除予定）
model ApiSettings {
  id             String         @id @default(cuid())
  service        PaymentService
  environment    Environment    @default(sandbox)
  publishableKey String?
  secretKey      String
  webhookUrl     String?
  isActive       Boolean        @default(true)
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String?
  user           User?          @relation(fields: [userId], references: [id])

  @@unique([service, environment, userId])
  @@index([userId])
  @@index([isActive])
  @@index([service, isActive])
  @@map("api_settings")
}

enum SubscriptionStatus {
  active
  trialing
  past_due
  canceled
  incomplete
  unpaid
}

enum PaymentService {
  stripe
  paypal
  square
  paypay
  fincode
}

enum PaymentStatus {
  pending
  succeeded
  failed
  cancelled
  expired
}

enum TransactionStatus {
  pending
  completed
  failed
  cancelled
  refunded
}

enum Environment {
  sandbox
  production
}
