generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  apiSettings  ApiSettings[]
  paymentLinks PaymentLink[]

  @@map("users")
}

model PaymentLink {
  id            String         @id @default(cuid())
  title         String
  description   String?
  amount        Int
  currency      String         @default("jpy")
  quantity      Int            @default(1)
  service       PaymentService
  serviceId     String
  paymentUrl    String
  qrCodeUrl     String?
  qrCodeData    String?
  customerEmail String?
  successUrl    String?
  cancelUrl     String?
  expiresAt     DateTime?
  status        PaymentStatus  @default(ACTIVE)
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String?
  user          User?          @relation(fields: [userId], references: [id])
  transactions  Transaction[]

  @@index([createdAt])
  @@index([service])
  @@index([status])
  @@index([userId, createdAt])
  @@index([service, status])
  @@map("payment_links")
}

model Transaction {
  id                   String            @id @default(cuid())
  paymentLinkId        String
  amount               Int
  currency             String
  service              PaymentService
  serviceTransactionId String?
  customerEmail        String?
  customerName         String?
  customerPhone        String?
  status               TransactionStatus @default(PENDING)
  paidAt               DateTime?
  metadata             Json?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  paymentLink          PaymentLink       @relation(fields: [paymentLinkId], references: [id])

  @@index([paymentLinkId])
  @@index([status])
  @@index([createdAt])
  @@index([paidAt])
  @@index([service, status])
  @@map("transactions")
}

model ApiSettings {
  id          String         @id @default(cuid())
  service     PaymentService
  environment Environment    @default(SANDBOX)
  publicKey   String?
  secretKey   String
  webhookUrl  String?
  isActive    Boolean        @default(true)
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  userId      String?
  user        User?          @relation(fields: [userId], references: [id])

  @@unique([service, environment, userId])
  @@index([userId])
  @@index([isActive])
  @@index([service, isActive])
  @@map("api_settings")
}

enum PaymentService {
  STRIPE
  PAYPAL
  SQUARE
  PAYPAY
  FINCODE
}

enum PaymentStatus {
  ACTIVE
  EXPIRED
  DISABLED
  COMPLETED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum Environment {
  SANDBOX
  PRODUCTION
}
