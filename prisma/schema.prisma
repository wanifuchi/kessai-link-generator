generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  password      String?       // ハッシュ化されたパスワード
  name          String?
  googleId      String?       @unique // Google OAuth ID
  provider      String?       @default("email") // 認証方法 ("email" | "google")
  image         String?       // プロフィール画像URL (NextAuth.js標準)
  emailVerified DateTime?     // メール認証状態
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  apiSettings   ApiSettings[]
  paymentLinks  PaymentLink[]
  subscription  Subscription?
  accounts      Account[]     // NextAuth.js用
  sessions      Session[]     // NextAuth.js用

  @@map("users")
}

// NextAuth.js用のテーブル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Subscription {
  id                     String               @id @default(cuid())
  userId                 String               @unique
  user                   User                 @relation(fields: [userId], references: [id])
  stripeCustomerId       String               @unique
  stripeSubscriptionId   String               @unique
  status                 SubscriptionStatus
  currentPeriodEnd       DateTime?
  cancelAt               DateTime?
  cancelAtPeriodEnd      Boolean              @default(false)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@map("subscriptions")
}

model PaymentLink {
  id            String         @id @default(cuid())
  title         String
  description   String?
  amount        Int
  currency      String         @default("jpy")
  quantity      Int            @default(1)
  service       PaymentService
  serviceId     String
  paymentUrl    String
  qrCodeUrl     String?
  qrCodeData    String?
  customerEmail String?
  successUrl    String?
  cancelUrl     String?
  expiresAt     DateTime?
  status        PaymentStatus  @default(pending)
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String?
  user          User?          @relation(fields: [userId], references: [id])
  transactions  Transaction[]

  @@index([createdAt])
  @@index([service])
  @@index([status])
  @@index([userId, createdAt])
  @@index([service, status])
  @@map("payment_links")
}

model Transaction {
  id                   String            @id @default(cuid())
  paymentLinkId        String
  amount               Int
  currency             String
  service              PaymentService
  serviceTransactionId String?
  customerEmail        String?
  customerName         String?
  customerPhone        String?
  status               TransactionStatus @default(pending)
  paidAt               DateTime?
  metadata             Json?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  paymentLink          PaymentLink       @relation(fields: [paymentLinkId], references: [id])

  @@index([paymentLinkId])
  @@index([status])
  @@index([createdAt])
  @@index([paidAt])
  @@index([service, status])
  @@map("transactions")
}

model ApiSettings {
  id             String         @id @default(cuid())
  service        PaymentService
  environment    Environment    @default(sandbox)
  publishableKey String?
  secretKey      String
  webhookUrl     String?
  isActive       Boolean        @default(true)
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userId         String?
  user           User?          @relation(fields: [userId], references: [id])

  @@unique([service, environment, userId])
  @@index([userId])
  @@index([isActive])
  @@index([service, isActive])
  @@map("api_settings")
}

enum SubscriptionStatus {
  active
  trialing
  past_due
  canceled
  incomplete
  unpaid
}

enum PaymentService {
  stripe
  paypal
  square
  paypay
  fincode
}

enum PaymentStatus {
  pending
  completed
  failed
  canceled
  expired
}

enum TransactionStatus {
  pending
  completed
  failed
  cancelled
  refunded
}

enum Environment {
  sandbox
  production
}
